#include <Timemark.h>
#include <Wire.h>
#include <BH1750.h>

//pins for the ultrasonic, those are digtial, we can also use pin 3 and 2. // trig = 2
#define TRIGGER_PIN_1   30
#define ECHO_PIN_1      31
int echoTimeOne;             //time in us
float distanceOne;      //distance in 
//***** First Ultrasonic**********

#define TRIGGER_PIN_2   11
#define ECHO_PIN_2      12
int echoTimeTwo;             //time in us
float distanceTwo;           //distance in 
//******Second Ultrasonic*********

#define TRIGGER_PIN_3   50
#define ECHO_PIN_3      51
int echoTimeThree;             //time in us
float distanceThree;           //distance in 
//******Third Ultrasonic right*********


#define TRIGGER_PIN_4   2
#define ECHO_PIN_4      3
int echoTimeFour;             //time in us
float distanceFour;           //distance in 
//******Fourth Ultrasonic left*********

//pins for the 
//pins for the car
bool leftFlag = true;
bool rightFlag = true;

int in1 = 9;
int in2 = 8;
int in3 = 7;
int in4 = 6;
int enA = 10;
int enB = 5;
//Those for the car

//***Light Sensor***
BH1750 lightMeter(0x5C);
BH1750 backLightMeter(0x23);

float LightValue;

int Value;
int newVal = 1000;



#include <Wire.h>

// Power
#define BH1750_POWER_DOWN 0x00  // No active state
#define BH1750_POWER_ON 0x01  // Waiting for measurement command
#define BH1750_RESET 0x07  // Reset data register value - not accepted in POWER_DOWN mode

// Measurement Mode
#define CONTINUOUS_HIGH_RES_MODE 0x10  // Measurement at 1 lux resolution. Measurement time is approx 120ms
#define CONTINUOUS_HIGH_RES_MODE_2 0x11  // Measurement at 0.5 lux resolution. Measurement time is approx 120ms
#define CONTINUOUS_LOW_RES_MODE 0x13  // Measurement at 4 lux resolution. Measurement time is approx 16ms
#define ONE_TIME_HIGH_RES_MODE 0x20  // Measurement at 1 lux resolution. Measurement time is approx 120ms
#define ONE_TIME_HIGH_RES_MODE_2 0x21  // Measurement at 0.5 lux resolution. Measurement time is approx 120ms
#define ONE_TIME_LOW_RES_MODE 0x23  // Measurement at 4 lux resolution. Measurement time is approx 16ms

// I2C Address
#define BH1750_1_ADDRESS 0x23  // Sensor 1 connected to GND
#define BH1750_2_ADDRESS 0x5C  // Sensor 2 connected to VCC


// Definition of Variable
int16_t RawData;
int16_t SensorValue[2];
int16_t allLightReadings[4];
boolean blinkState = false;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9435);
  Wire.begin();
  lightMeter.begin();
  backLightMeter.begin();
  //*****Ultrasonic*****
   pinMode(TRIGGER_PIN_1, OUTPUT);
  pinMode(ECHO_PIN_1, INPUT);
  digitalWrite(TRIGGER_PIN_1, LOW); 
  
   pinMode(TRIGGER_PIN_2, OUTPUT);
  pinMode(ECHO_PIN_2, INPUT);
  digitalWrite(TRIGGER_PIN_2, LOW); 

   pinMode(TRIGGER_PIN_3, OUTPUT);
  pinMode(ECHO_PIN_3, INPUT);
  digitalWrite(TRIGGER_PIN_3, LOW); 

   pinMode(TRIGGER_PIN_4, OUTPUT);
  pinMode(ECHO_PIN_4, INPUT);
  digitalWrite(TRIGGER_PIN_4, LOW); 
  //*****Ultrasonic*****

 
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);

}
int val = 0;
  int directionn = 0;
bool once2 = true;
bool once = true;
bool once3 = true;

void loop() {
  // put your main code here, to run repeatedly:
  LightValue =  ReadLightValue();
  distanceOne = Ultrasonic_One(); //forward
  distanceTwo = Ultrasonic_Two(); //back
  distanceThree = Ultrasonic_Three();
  distanceFour = Ultrasonic_Four();
  //Check if we need light
  Serial.println("Distance");
      Serial.println(distanceFour);
  if(once){

    directionn = highestReading();
  once = false;
  }

 //Movement(0);
  

// Movement(0);
//  delay(4000);
//    StopTheCar();
//  if(once2){
//      Movement(2);
//      once2 = false;
//  }
//  delay(400);
//    Movement(0);
//  distanceTwo =  Ultrasonic_Two(); //forward
//  if(distanceTwo < 15){
//    StopTheCar();
//    delay(4000);
//  }

if(directionn == 0){
  Movement(0);
  distanceTwo =  Ultrasonic_Two(); //forward
  if(distanceTwo < 15){
    StopTheCar();
  }
}
if(directionn == 1){
  Movement(1);
    distanceOne = Ultrasonic_One(); //forward
  if(distanceOne < 15){
    StopTheCar();
  }
}
if(directionn == 2){
  if(once2){
      Movement(2);
      once2 = false;
  }
  delay(400);
    Movement(0);

}
if(directionn == 3){
  if(once3){
      Movement(3);
      once3 = false;
  }
  delay(400);
    Movement(0);
float    distancee = Ultrasonic_Two();
    if(distancee < 15){
     StopTheCar();
    delay(3000);
    }

    delay(3000);
         StopTheCar();


   
  }

  readLightValues(directionn);
  if(allLightReadings[directionn] > 200){
    StopTheCar();
    delay(3000);

}
//Found the Sun, stop
   
    
}//loop

float ReadLightValue(){
  float Value;
  Value = lightMeter.readLightLevel(true);
  return Value;  
}

float ReadBackLightValue(){
  float Value;
  Value = backLightMeter.readLightLevel(true);
  return Value;  
}
int Ultrasonic_One(){
  int distance;
  digitalWrite(TRIGGER_PIN_1, HIGH);    //send trigger pulse
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN_1, LOW);
  echoTimeOne = pulseIn(ECHO_PIN_1, HIGH); //capture the echo signal and determine duration of pulse when HIGH
 // distance = (echoTime*0.034*10)/2;    //obtain distance (in mm), from time
 distance = (echoTimeOne*0.034)/2;    //obtain distance (in cm), from time
 return distance;
}

int Ultrasonic_Two(){
    int distance;
  digitalWrite(TRIGGER_PIN_2, HIGH);    //send trigger pulse
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN_2, LOW);
  echoTimeTwo = pulseIn(ECHO_PIN_2, HIGH); //capture the echo signal and determine duration of pulse when HIGH
 // distance = (echoTime*0.034*10)/2;    //obtain distance (in mm), from time
 distance = (echoTimeTwo*0.034)/2;    //obtain distance (in cm), from time
 return distance;
}

int Ultrasonic_Three(){
  int distance;
  digitalWrite(TRIGGER_PIN_3, HIGH);    //send trigger pulse
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN_3, LOW);
  echoTimeThree = pulseIn(ECHO_PIN_3, HIGH); //capture the echo signal and determine duration of pulse when HIGH
 // distance = (echoTime*0.034*10)/2;    //obtain distance (in mm), from time
 distance = (echoTimeThree*0.034)/2;    //obtain distance (in cm), from time
 return distance;
}

int Ultrasonic_Four(){
  int distance;
  digitalWrite(TRIGGER_PIN_4, HIGH);    //send trigger pulse
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN_4, LOW);
  echoTimeFour = pulseIn(ECHO_PIN_4, HIGH); //capture the echo signal and determine duration of pulse when HIGH
 // distance = (echoTime*0.034*10)/2;    //obtain distance (in mm), from time
 distance = (echoTimeFour*0.034)/2;    //obtain distance (in cm), from time
 return distance;
}
void StopTheCar(){
    analogWrite(enA, 0);
     analogWrite(enB, 0);
     digitalWrite(in1, LOW);
     digitalWrite(in2, LOW);  
     digitalWrite(in3, LOW);
     digitalWrite(in4, LOW);
}

int Movement(int value){
  int valuein = value;
  switch (valuein){
    case 0: //forward
  
    forward();
    break;

    case 1: //right
      backwards();
    
     break;

     case 2://left
   
      left();
    
     break;

     case 3:
    
       right();    
    break;
    
  }
  return valuein;
}//function


void forward() {
      analogWrite(enA, 200);
    analogWrite(enB, 200);
 digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
}

void right() {
//  forward();
//  delay(100);
      analogWrite(enA, 240);
    analogWrite(enB, 240);
 digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    //delay(1200);
    //forward();
}
void left() {
//    forward();
//  delay(100);
      analogWrite(enA, 240);
    analogWrite(enB, 240);
 digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
  //  delay(1700);
   // forward();
}
void backwards() {
      analogWrite(enA, 200);
    analogWrite(enB, 200);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
}

void readLightValues(int index){
   init_BH1750(BH1750_1_ADDRESS, CONTINUOUS_HIGH_RES_MODE);
  delay(120);
  RawData_BH1750(BH1750_1_ADDRESS);
  SensorValue[0] = RawData / 1.2;  

  init_BH1750(BH1750_2_ADDRESS, CONTINUOUS_HIGH_RES_MODE);
  delay(120);
  RawData_BH1750(BH1750_2_ADDRESS);
  SensorValue[1] = RawData / 1.2;

  Serial.print("Sensor_1 = "); Serial.print(SensorValue[0]);
  Serial.print(" | Sensor_2 = "); Serial.println(SensorValue[1]);
//  allLightReadings[index] =  (SensorValue[0] +  SensorValue[1]) / 2.0;
//  Serial.print(" | all = "); Serial.println(allLightReadings[index] );
//if(index == 0 ){
//    allLightReadings[index] =SensorValue[1];
//  
//} else if(index == 2){
//      allLightReadings[index] =SensorValue[0];
//
//} else if(index == 3){
//      allLightReadings[index] =SensorValue[1];
//
//}
//else if(index == 1){
//      allLightReadings[index] =SensorValue[0];
//
//}
if(SensorValue[0] > SensorValue[1] ){
   allLightReadings[index] = SensorValue[0] ;

}else{
     allLightReadings[index] = SensorValue[1] ;

}
 Serial.print(" | index = "); 
   Serial.print(index);
    Serial.println(" | light is = "); 

   Serial.println(allLightReadings[index] );


}

void init_BH1750(int ADDRESS, int MODE){
  //BH1750 Initializing & Reset
  Wire.beginTransmission(ADDRESS);
  Wire.write(MODE);  // PWR_MGMT_1 register
  Wire.endTransmission(true);
}

void RawData_BH1750(int ADDRESS){
  Wire.beginTransmission(ADDRESS);
  Wire.requestFrom(ADDRESS,2,true);  // request a total of 2 registers
  RawData = Wire.read() << 8 | Wire.read();  // Read Raw Data of BH1750
  Wire.endTransmission(true);
}

int highestReading() {
  float maxReading = 0.0;
  int directionIndex = 0;
  //forward
   
  float timeForMovement = startTimerAndMove(2000,0);
      StopTheCar();
       delay(400);
      readLightValues(0);
   // backwards to place it back at position 0
  float dontcare = startTimerAndMove(timeForMovement,1);
        StopTheCar();
       delay(400);

//back
  float timeFromBack2 = startTimerAndMove(2000,1);
    StopTheCar();
    readLightValues(1);
         delay(400);
//
//   //forward to get car back at pos 0
//
     float noshit = startTimerAndMove(timeFromBack2+500,0);
      StopTheCar();
       delay(400);
//

    distanceFour = Ultrasonic_Four();

    distanceThree = Ultrasonic_Three();

    if(distanceThree <= 10){
      rightFlag = false;
    }
     if(distanceFour <= 10){
      leftFlag = false;
    }
//    if(!rightFlag){
//      //    //left
//      Movement(2);
//      delay(435);
//      float timeLeft = startTimerAndMove(2000,2);
//      StopTheCar();
//       delay(400);
//      readLightValues(2);
////     // back to place it back at pos 0
//       float haha = startTimerAndMove(timeLeft,1);
//        StopTheCar();
//       delay(400);
//          allLightReadings[3] = 0.0;
//    //back to first orientation
//    Movement(3); 
//    delay(500);
//        StopTheCar();
//    delay(400);
//    }
//   else if(!leftFlag){
//      Movement(2);
//      delay(435);
//                allLightReadings[2] = 0.0;
//
//      float timeLeft = startTimerAndMove(2000,3);
//      StopTheCar();
//       delay(400);
//      readLightValues(2);
////     // back to place it back at pos 0
//       float haha = startTimerAndMove(timeLeft,1);
//        StopTheCar();
//       delay(400);
//          
//    //back to first orientation
//    Movement(3); 
//    delay(500);
//        StopTheCar();
//    delay(400);
//    }
         Movement(2);
      delay(435);
      float timeLeft = startTimerAndMove(2000,2);
      StopTheCar();
       delay(400);
      readLightValues(2);
//     // back to place it back at pos 0
       float haha = startTimerAndMove(timeLeft,1);
        StopTheCar();
       delay(400);
        float timeRight = startTimerAndMove(2000,1);
      StopTheCar();
      delay(400);
      readLightValues(3);
//      // back to pos 0
       float noOneCares = startTimerAndMove(timeRight,0);
    StopTheCar();
    delay(400);
       
    //back to first orientation
    Movement(3); 
    delay(500);
        StopTheCar();
    delay(400);
      
 /*
          *  //check left and right ultrasonic
          * distacneR = ultraonic 3
          * distanceL = ultra sonic 4
          * bool left, right
          * if(dr <=10>){
          * right = false; //there is no need to read from right side
          * }
          * if(dl<=10){
          * left false;
          * }
          * 
          *  //rotate for the car 
          *  if(!right)
          *  {
          *  //3 is zero
          *  roatet left and then forward then rotate it back
          *  
          *  
          *  }
          *  
          * else if(!left){
          * //2 is zero
          *  roatet right and then forward then rotate it back
          *  
          *  }
          *  


*/



//    // go right
  

      for(int i = 0 ; i < 3 ; i++){
        if (maxReading < allLightReadings[i] ){
          maxReading = allLightReadings[i];
          directionIndex = i;
        }
      }
      return directionIndex;
}

float startTimerAndMove(float prevEllapsed,int dir){
  Timemark Timer(2000);
   float ellapsed = 0.0;
   float ellapsedback = 0.0;
  int distance = 0;
       Timer.start();
//       if(dir == 2){
//         Movement(dir);
//       }
  while(true ){
    if(dir == 2){
         Movement(dir-2);
       }else {
          Movement(dir);
       }
          if(dir == 0){
             distance = Ultrasonic_Two();
          } else if(dir == 1){
             distance = Ultrasonic_One();
          } else {
              distance = Ultrasonic_Two();
          }
          Serial.println(distance);
        if(ellapsed > prevEllapsed){
          Timer.stop();
          break;
        }
        if( distance < 15){
          Timer.stop();
          break;
        }
       ellapsed =  Timer.elapsed();
      // Serial.println(ellapsed);

}
Serial.print("DONEEE");
Serial.print(ellapsed);

return ellapsed;
}